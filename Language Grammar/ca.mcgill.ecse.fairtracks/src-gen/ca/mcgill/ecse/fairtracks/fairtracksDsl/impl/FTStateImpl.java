/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl.impl;

import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObservation;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTState;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FT State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTStateImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTStateImpl#getPosX <em>Pos X</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTStateImpl#getPosY <em>Pos Y</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTStateImpl#getObservations <em>Observations</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTStateImpl#getNextState <em>Next State</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FTStateImpl extends MinimalEObjectImpl.Container implements FTState
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getPosX() <em>Pos X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPosX()
   * @generated
   * @ordered
   */
  protected static final int POS_X_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPosX() <em>Pos X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPosX()
   * @generated
   * @ordered
   */
  protected int posX = POS_X_EDEFAULT;

  /**
   * The default value of the '{@link #getPosY() <em>Pos Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPosY()
   * @generated
   * @ordered
   */
  protected static final int POS_Y_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPosY() <em>Pos Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPosY()
   * @generated
   * @ordered
   */
  protected int posY = POS_Y_EDEFAULT;

  /**
   * The cached value of the '{@link #getObservations() <em>Observations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservations()
   * @generated
   * @ordered
   */
  protected EList<FTObservation> observations;

  /**
   * The cached value of the '{@link #getNextState() <em>Next State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNextState()
   * @generated
   * @ordered
   */
  protected FTState nextState;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FTStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FairtracksDslPackage.Literals.FT_STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_STATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getPosX()
  {
    return posX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPosX(int newPosX)
  {
    int oldPosX = posX;
    posX = newPosX;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_STATE__POS_X, oldPosX, posX));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getPosY()
  {
    return posY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPosY(int newPosY)
  {
    int oldPosY = posY;
    posY = newPosY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_STATE__POS_Y, oldPosY, posY));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTObservation> getObservations()
  {
    if (observations == null)
    {
      observations = new EObjectContainmentEList<FTObservation>(FTObservation.class, this, FairtracksDslPackage.FT_STATE__OBSERVATIONS);
    }
    return observations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTState getNextState()
  {
    if (nextState != null && nextState.eIsProxy())
    {
      InternalEObject oldNextState = (InternalEObject)nextState;
      nextState = (FTState)eResolveProxy(oldNextState);
      if (nextState != oldNextState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FairtracksDslPackage.FT_STATE__NEXT_STATE, oldNextState, nextState));
      }
    }
    return nextState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTState basicGetNextState()
  {
    return nextState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNextState(FTState newNextState)
  {
    FTState oldNextState = nextState;
    nextState = newNextState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_STATE__NEXT_STATE, oldNextState, nextState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_STATE__OBSERVATIONS:
        return ((InternalEList<?>)getObservations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_STATE__NAME:
        return getName();
      case FairtracksDslPackage.FT_STATE__POS_X:
        return getPosX();
      case FairtracksDslPackage.FT_STATE__POS_Y:
        return getPosY();
      case FairtracksDslPackage.FT_STATE__OBSERVATIONS:
        return getObservations();
      case FairtracksDslPackage.FT_STATE__NEXT_STATE:
        if (resolve) return getNextState();
        return basicGetNextState();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_STATE__NAME:
        setName((String)newValue);
        return;
      case FairtracksDslPackage.FT_STATE__POS_X:
        setPosX((Integer)newValue);
        return;
      case FairtracksDslPackage.FT_STATE__POS_Y:
        setPosY((Integer)newValue);
        return;
      case FairtracksDslPackage.FT_STATE__OBSERVATIONS:
        getObservations().clear();
        getObservations().addAll((Collection<? extends FTObservation>)newValue);
        return;
      case FairtracksDslPackage.FT_STATE__NEXT_STATE:
        setNextState((FTState)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_STATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case FairtracksDslPackage.FT_STATE__POS_X:
        setPosX(POS_X_EDEFAULT);
        return;
      case FairtracksDslPackage.FT_STATE__POS_Y:
        setPosY(POS_Y_EDEFAULT);
        return;
      case FairtracksDslPackage.FT_STATE__OBSERVATIONS:
        getObservations().clear();
        return;
      case FairtracksDslPackage.FT_STATE__NEXT_STATE:
        setNextState((FTState)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_STATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case FairtracksDslPackage.FT_STATE__POS_X:
        return posX != POS_X_EDEFAULT;
      case FairtracksDslPackage.FT_STATE__POS_Y:
        return posY != POS_Y_EDEFAULT;
      case FairtracksDslPackage.FT_STATE__OBSERVATIONS:
        return observations != null && !observations.isEmpty();
      case FairtracksDslPackage.FT_STATE__NEXT_STATE:
        return nextState != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", posX: ");
    result.append(posX);
    result.append(", posY: ");
    result.append(posY);
    result.append(')');
    return result.toString();
  }

} //FTStateImpl
