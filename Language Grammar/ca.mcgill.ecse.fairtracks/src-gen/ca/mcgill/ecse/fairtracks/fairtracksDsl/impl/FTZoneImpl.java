/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl.impl;

import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPlayer;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZone;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZoneType;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FT Zone</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTZoneImpl#getType <em>Type</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTZoneImpl#getContains <em>Contains</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTZoneImpl#getPartiallyOverlaps <em>Partially Overlaps</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTZoneImpl#getIsAdjacentTo <em>Is Adjacent To</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTZoneImpl#getDisallowedPlayers <em>Disallowed Players</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FTZoneImpl extends FTObjectWithDistanceImpl implements FTZone
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final FTZoneType TYPE_EDEFAULT = FTZoneType.BACKGROUND;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected FTZoneType type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getContains() <em>Contains</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContains()
   * @generated
   * @ordered
   */
  protected EList<FTZone> contains;

  /**
   * The cached value of the '{@link #getPartiallyOverlaps() <em>Partially Overlaps</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPartiallyOverlaps()
   * @generated
   * @ordered
   */
  protected EList<FTZone> partiallyOverlaps;

  /**
   * The cached value of the '{@link #getIsAdjacentTo() <em>Is Adjacent To</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsAdjacentTo()
   * @generated
   * @ordered
   */
  protected EList<FTZone> isAdjacentTo;

  /**
   * The cached value of the '{@link #getDisallowedPlayers() <em>Disallowed Players</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisallowedPlayers()
   * @generated
   * @ordered
   */
  protected EList<FTPlayer> disallowedPlayers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FTZoneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FairtracksDslPackage.Literals.FT_ZONE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZoneType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(FTZoneType newType)
  {
    FTZoneType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_ZONE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTZone> getContains()
  {
    if (contains == null)
    {
      contains = new EObjectResolvingEList<FTZone>(FTZone.class, this, FairtracksDslPackage.FT_ZONE__CONTAINS);
    }
    return contains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTZone> getPartiallyOverlaps()
  {
    if (partiallyOverlaps == null)
    {
      partiallyOverlaps = new EObjectResolvingEList<FTZone>(FTZone.class, this, FairtracksDslPackage.FT_ZONE__PARTIALLY_OVERLAPS);
    }
    return partiallyOverlaps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTZone> getIsAdjacentTo()
  {
    if (isAdjacentTo == null)
    {
      isAdjacentTo = new EObjectResolvingEList<FTZone>(FTZone.class, this, FairtracksDslPackage.FT_ZONE__IS_ADJACENT_TO);
    }
    return isAdjacentTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTPlayer> getDisallowedPlayers()
  {
    if (disallowedPlayers == null)
    {
      disallowedPlayers = new EObjectResolvingEList<FTPlayer>(FTPlayer.class, this, FairtracksDslPackage.FT_ZONE__DISALLOWED_PLAYERS);
    }
    return disallowedPlayers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_ZONE__TYPE:
        return getType();
      case FairtracksDslPackage.FT_ZONE__CONTAINS:
        return getContains();
      case FairtracksDslPackage.FT_ZONE__PARTIALLY_OVERLAPS:
        return getPartiallyOverlaps();
      case FairtracksDslPackage.FT_ZONE__IS_ADJACENT_TO:
        return getIsAdjacentTo();
      case FairtracksDslPackage.FT_ZONE__DISALLOWED_PLAYERS:
        return getDisallowedPlayers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_ZONE__TYPE:
        setType((FTZoneType)newValue);
        return;
      case FairtracksDslPackage.FT_ZONE__CONTAINS:
        getContains().clear();
        getContains().addAll((Collection<? extends FTZone>)newValue);
        return;
      case FairtracksDslPackage.FT_ZONE__PARTIALLY_OVERLAPS:
        getPartiallyOverlaps().clear();
        getPartiallyOverlaps().addAll((Collection<? extends FTZone>)newValue);
        return;
      case FairtracksDslPackage.FT_ZONE__IS_ADJACENT_TO:
        getIsAdjacentTo().clear();
        getIsAdjacentTo().addAll((Collection<? extends FTZone>)newValue);
        return;
      case FairtracksDslPackage.FT_ZONE__DISALLOWED_PLAYERS:
        getDisallowedPlayers().clear();
        getDisallowedPlayers().addAll((Collection<? extends FTPlayer>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_ZONE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case FairtracksDslPackage.FT_ZONE__CONTAINS:
        getContains().clear();
        return;
      case FairtracksDslPackage.FT_ZONE__PARTIALLY_OVERLAPS:
        getPartiallyOverlaps().clear();
        return;
      case FairtracksDslPackage.FT_ZONE__IS_ADJACENT_TO:
        getIsAdjacentTo().clear();
        return;
      case FairtracksDslPackage.FT_ZONE__DISALLOWED_PLAYERS:
        getDisallowedPlayers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_ZONE__TYPE:
        return type != TYPE_EDEFAULT;
      case FairtracksDslPackage.FT_ZONE__CONTAINS:
        return contains != null && !contains.isEmpty();
      case FairtracksDslPackage.FT_ZONE__PARTIALLY_OVERLAPS:
        return partiallyOverlaps != null && !partiallyOverlaps.isEmpty();
      case FairtracksDslPackage.FT_ZONE__IS_ADJACENT_TO:
        return isAdjacentTo != null && !isAdjacentTo.isEmpty();
      case FairtracksDslPackage.FT_ZONE__DISALLOWED_PLAYERS:
        return disallowedPlayers != null && !disallowedPlayers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //FTZoneImpl
