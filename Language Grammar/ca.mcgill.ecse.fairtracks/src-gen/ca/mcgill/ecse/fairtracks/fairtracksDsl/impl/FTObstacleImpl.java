/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl.impl;

import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObstacle;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPickUpColor;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZone;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FT Obstacle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTObstacleImpl#isIsMoveable <em>Is Moveable</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTObstacleImpl#getColor <em>Color</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTObstacleImpl#getInitiallyInside <em>Initially Inside</em>}</li>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTObstacleImpl#getDisallowedZones <em>Disallowed Zones</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FTObstacleImpl extends FTObjectWithDistanceImpl implements FTObstacle
{
  /**
   * The default value of the '{@link #isIsMoveable() <em>Is Moveable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMoveable()
   * @generated
   * @ordered
   */
  protected static final boolean IS_MOVEABLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsMoveable() <em>Is Moveable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsMoveable()
   * @generated
   * @ordered
   */
  protected boolean isMoveable = IS_MOVEABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected static final FTPickUpColor COLOR_EDEFAULT = FTPickUpColor.RED;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected FTPickUpColor color = COLOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getInitiallyInside() <em>Initially Inside</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitiallyInside()
   * @generated
   * @ordered
   */
  protected FTZone initiallyInside;

  /**
   * The cached value of the '{@link #getDisallowedZones() <em>Disallowed Zones</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisallowedZones()
   * @generated
   * @ordered
   */
  protected EList<FTZone> disallowedZones;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FTObstacleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FairtracksDslPackage.Literals.FT_OBSTACLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsMoveable()
  {
    return isMoveable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsMoveable(boolean newIsMoveable)
  {
    boolean oldIsMoveable = isMoveable;
    isMoveable = newIsMoveable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_OBSTACLE__IS_MOVEABLE, oldIsMoveable, isMoveable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTPickUpColor getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(FTPickUpColor newColor)
  {
    FTPickUpColor oldColor = color;
    color = newColor == null ? COLOR_EDEFAULT : newColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_OBSTACLE__COLOR, oldColor, color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZone getInitiallyInside()
  {
    if (initiallyInside != null && initiallyInside.eIsProxy())
    {
      InternalEObject oldInitiallyInside = (InternalEObject)initiallyInside;
      initiallyInside = (FTZone)eResolveProxy(oldInitiallyInside);
      if (initiallyInside != oldInitiallyInside)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FairtracksDslPackage.FT_OBSTACLE__INITIALLY_INSIDE, oldInitiallyInside, initiallyInside));
      }
    }
    return initiallyInside;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZone basicGetInitiallyInside()
  {
    return initiallyInside;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitiallyInside(FTZone newInitiallyInside)
  {
    FTZone oldInitiallyInside = initiallyInside;
    initiallyInside = newInitiallyInside;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FairtracksDslPackage.FT_OBSTACLE__INITIALLY_INSIDE, oldInitiallyInside, initiallyInside));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTZone> getDisallowedZones()
  {
    if (disallowedZones == null)
    {
      disallowedZones = new EObjectResolvingEList<FTZone>(FTZone.class, this, FairtracksDslPackage.FT_OBSTACLE__DISALLOWED_ZONES);
    }
    return disallowedZones;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBSTACLE__IS_MOVEABLE:
        return isIsMoveable();
      case FairtracksDslPackage.FT_OBSTACLE__COLOR:
        return getColor();
      case FairtracksDslPackage.FT_OBSTACLE__INITIALLY_INSIDE:
        if (resolve) return getInitiallyInside();
        return basicGetInitiallyInside();
      case FairtracksDslPackage.FT_OBSTACLE__DISALLOWED_ZONES:
        return getDisallowedZones();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBSTACLE__IS_MOVEABLE:
        setIsMoveable((Boolean)newValue);
        return;
      case FairtracksDslPackage.FT_OBSTACLE__COLOR:
        setColor((FTPickUpColor)newValue);
        return;
      case FairtracksDslPackage.FT_OBSTACLE__INITIALLY_INSIDE:
        setInitiallyInside((FTZone)newValue);
        return;
      case FairtracksDslPackage.FT_OBSTACLE__DISALLOWED_ZONES:
        getDisallowedZones().clear();
        getDisallowedZones().addAll((Collection<? extends FTZone>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBSTACLE__IS_MOVEABLE:
        setIsMoveable(IS_MOVEABLE_EDEFAULT);
        return;
      case FairtracksDslPackage.FT_OBSTACLE__COLOR:
        setColor(COLOR_EDEFAULT);
        return;
      case FairtracksDslPackage.FT_OBSTACLE__INITIALLY_INSIDE:
        setInitiallyInside((FTZone)null);
        return;
      case FairtracksDslPackage.FT_OBSTACLE__DISALLOWED_ZONES:
        getDisallowedZones().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBSTACLE__IS_MOVEABLE:
        return isMoveable != IS_MOVEABLE_EDEFAULT;
      case FairtracksDslPackage.FT_OBSTACLE__COLOR:
        return color != COLOR_EDEFAULT;
      case FairtracksDslPackage.FT_OBSTACLE__INITIALLY_INSIDE:
        return initiallyInside != null;
      case FairtracksDslPackage.FT_OBSTACLE__DISALLOWED_ZONES:
        return disallowedZones != null && !disallowedZones.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isMoveable: ");
    result.append(isMoveable);
    result.append(", color: ");
    result.append(color);
    result.append(')');
    return result.toString();
  }

} //FTObstacleImpl
