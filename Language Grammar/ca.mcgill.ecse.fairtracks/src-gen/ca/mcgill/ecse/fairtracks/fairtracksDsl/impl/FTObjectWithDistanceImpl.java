/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl.impl;

import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTDistance;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObjectWithDistance;
import ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>FT Object With Distance</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.impl.FTObjectWithDistanceImpl#getDistanceClass <em>Distance Class</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FTObjectWithDistanceImpl extends FTStaticObjectImpl implements FTObjectWithDistance
{
  /**
   * The cached value of the '{@link #getDistanceClass() <em>Distance Class</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDistanceClass()
   * @generated
   * @ordered
   */
  protected EList<FTDistance> distanceClass;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FTObjectWithDistanceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FairtracksDslPackage.Literals.FT_OBJECT_WITH_DISTANCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FTDistance> getDistanceClass()
  {
    if (distanceClass == null)
    {
      distanceClass = new EObjectContainmentEList<FTDistance>(FTDistance.class, this, FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE__DISTANCE_CLASS);
    }
    return distanceClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE__DISTANCE_CLASS:
        return ((InternalEList<?>)getDistanceClass()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE__DISTANCE_CLASS:
        return getDistanceClass();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE__DISTANCE_CLASS:
        getDistanceClass().clear();
        getDistanceClass().addAll((Collection<? extends FTDistance>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE__DISTANCE_CLASS:
        getDistanceClass().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE__DISTANCE_CLASS:
        return distanceClass != null && !distanceClass.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FTObjectWithDistanceImpl
