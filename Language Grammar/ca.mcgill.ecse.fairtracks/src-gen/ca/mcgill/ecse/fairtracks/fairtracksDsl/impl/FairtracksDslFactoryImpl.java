/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl.impl;

import ca.mcgill.ecse.fairtracks.fairtracksDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FairtracksDslFactoryImpl extends EFactoryImpl implements FairtracksDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FairtracksDslFactory init()
  {
    try
    {
      FairtracksDslFactory theFairtracksDslFactory = (FairtracksDslFactory)EPackage.Registry.INSTANCE.getEFactory(FairtracksDslPackage.eNS_URI);
      if (theFairtracksDslFactory != null)
      {
        return theFairtracksDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FairtracksDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FairtracksDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FairtracksDslPackage.FAIRTRACKSMODEL: return createFairtracksmodel();
      case FairtracksDslPackage.FT_STATIC_OBJECT: return createFTStaticObject();
      case FairtracksDslPackage.FT_OBJECT_WITH_DISTANCE: return createFTObjectWithDistance();
      case FairtracksDslPackage.FT_PLAYER: return createFTPlayer();
      case FairtracksDslPackage.FT_PICK_UP_COLOR_CLASS: return createFTPickUpColorClass();
      case FairtracksDslPackage.FT_ZONE: return createFTZone();
      case FairtracksDslPackage.FT_OBSTACLE: return createFTObstacle();
      case FairtracksDslPackage.FT_ZIPLINE: return createFTZipline();
      case FairtracksDslPackage.FT_REAL_COORDINATES: return createFTRealCoordinates();
      case FairtracksDslPackage.FT_DISTANCE: return createFTDistance();
      case FairtracksDslPackage.FT_TRAJECTORY: return createFTTrajectory();
      case FairtracksDslPackage.FT_STATE: return createFTState();
      case FairtracksDslPackage.FT_OBSERVATION: return createFTObservation();
      case FairtracksDslPackage.FT_DISTANCE_OBS: return createFTDistanceObs();
      case FairtracksDslPackage.FT_HANGING_OBS: return createFTHangingObs();
      case FairtracksDslPackage.FT_PICK_UP_OBS: return createFTPickUpObs();
      case FairtracksDslPackage.FT_ZONE_OBS: return createFTZoneObs();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case FairtracksDslPackage.FT_PICK_UP_COLOR:
        return createFTPickUpColorFromString(eDataType, initialValue);
      case FairtracksDslPackage.FT_ROLE:
        return createFTRoleFromString(eDataType, initialValue);
      case FairtracksDslPackage.FT_ZONE_TYPE:
        return createFTZoneTypeFromString(eDataType, initialValue);
      case FairtracksDslPackage.FT_DISTANCE_VALUE:
        return createFTDistanceValueFromString(eDataType, initialValue);
      case FairtracksDslPackage.FT_SIZE:
        return createFTSizeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case FairtracksDslPackage.FT_PICK_UP_COLOR:
        return convertFTPickUpColorToString(eDataType, instanceValue);
      case FairtracksDslPackage.FT_ROLE:
        return convertFTRoleToString(eDataType, instanceValue);
      case FairtracksDslPackage.FT_ZONE_TYPE:
        return convertFTZoneTypeToString(eDataType, instanceValue);
      case FairtracksDslPackage.FT_DISTANCE_VALUE:
        return convertFTDistanceValueToString(eDataType, instanceValue);
      case FairtracksDslPackage.FT_SIZE:
        return convertFTSizeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fairtracksmodel createFairtracksmodel()
  {
    FairtracksmodelImpl fairtracksmodel = new FairtracksmodelImpl();
    return fairtracksmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTStaticObject createFTStaticObject()
  {
    FTStaticObjectImpl ftStaticObject = new FTStaticObjectImpl();
    return ftStaticObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTObjectWithDistance createFTObjectWithDistance()
  {
    FTObjectWithDistanceImpl ftObjectWithDistance = new FTObjectWithDistanceImpl();
    return ftObjectWithDistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTPlayer createFTPlayer()
  {
    FTPlayerImpl ftPlayer = new FTPlayerImpl();
    return ftPlayer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTPickUpColorClass createFTPickUpColorClass()
  {
    FTPickUpColorClassImpl ftPickUpColorClass = new FTPickUpColorClassImpl();
    return ftPickUpColorClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZone createFTZone()
  {
    FTZoneImpl ftZone = new FTZoneImpl();
    return ftZone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTObstacle createFTObstacle()
  {
    FTObstacleImpl ftObstacle = new FTObstacleImpl();
    return ftObstacle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZipline createFTZipline()
  {
    FTZiplineImpl ftZipline = new FTZiplineImpl();
    return ftZipline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTRealCoordinates createFTRealCoordinates()
  {
    FTRealCoordinatesImpl ftRealCoordinates = new FTRealCoordinatesImpl();
    return ftRealCoordinates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTDistance createFTDistance()
  {
    FTDistanceImpl ftDistance = new FTDistanceImpl();
    return ftDistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTTrajectory createFTTrajectory()
  {
    FTTrajectoryImpl ftTrajectory = new FTTrajectoryImpl();
    return ftTrajectory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTState createFTState()
  {
    FTStateImpl ftState = new FTStateImpl();
    return ftState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTObservation createFTObservation()
  {
    FTObservationImpl ftObservation = new FTObservationImpl();
    return ftObservation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTDistanceObs createFTDistanceObs()
  {
    FTDistanceObsImpl ftDistanceObs = new FTDistanceObsImpl();
    return ftDistanceObs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTHangingObs createFTHangingObs()
  {
    FTHangingObsImpl ftHangingObs = new FTHangingObsImpl();
    return ftHangingObs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTPickUpObs createFTPickUpObs()
  {
    FTPickUpObsImpl ftPickUpObs = new FTPickUpObsImpl();
    return ftPickUpObs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZoneObs createFTZoneObs()
  {
    FTZoneObsImpl ftZoneObs = new FTZoneObsImpl();
    return ftZoneObs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTPickUpColor createFTPickUpColorFromString(EDataType eDataType, String initialValue)
  {
    FTPickUpColor result = FTPickUpColor.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFTPickUpColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTRole createFTRoleFromString(EDataType eDataType, String initialValue)
  {
    FTRole result = FTRole.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFTRoleToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTZoneType createFTZoneTypeFromString(EDataType eDataType, String initialValue)
  {
    FTZoneType result = FTZoneType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFTZoneTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTDistanceValue createFTDistanceValueFromString(EDataType eDataType, String initialValue)
  {
    FTDistanceValue result = FTDistanceValue.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFTDistanceValueToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTSize createFTSizeFromString(EDataType eDataType, String initialValue)
  {
    FTSize result = FTSize.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFTSizeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FairtracksDslPackage getFairtracksDslPackage()
  {
    return (FairtracksDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FairtracksDslPackage getPackage()
  {
    return FairtracksDslPackage.eINSTANCE;
  }

} //FairtracksDslFactoryImpl
