/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl.util;

import ca.mcgill.ecse.fairtracks.fairtracksDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage
 * @generated
 */
public class FairtracksDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FairtracksDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FairtracksDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FairtracksDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FairtracksDslSwitch<Adapter> modelSwitch =
    new FairtracksDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseFairtracksmodel(Fairtracksmodel object)
      {
        return createFairtracksmodelAdapter();
      }
      @Override
      public Adapter caseFTStaticObject(FTStaticObject object)
      {
        return createFTStaticObjectAdapter();
      }
      @Override
      public Adapter caseFTObjectWithDistance(FTObjectWithDistance object)
      {
        return createFTObjectWithDistanceAdapter();
      }
      @Override
      public Adapter caseFTPlayer(FTPlayer object)
      {
        return createFTPlayerAdapter();
      }
      @Override
      public Adapter caseFTPickUpColorClass(FTPickUpColorClass object)
      {
        return createFTPickUpColorClassAdapter();
      }
      @Override
      public Adapter caseFTZone(FTZone object)
      {
        return createFTZoneAdapter();
      }
      @Override
      public Adapter caseFTObstacle(FTObstacle object)
      {
        return createFTObstacleAdapter();
      }
      @Override
      public Adapter caseFTZipline(FTZipline object)
      {
        return createFTZiplineAdapter();
      }
      @Override
      public Adapter caseFTRealCoordinates(FTRealCoordinates object)
      {
        return createFTRealCoordinatesAdapter();
      }
      @Override
      public Adapter caseFTDistance(FTDistance object)
      {
        return createFTDistanceAdapter();
      }
      @Override
      public Adapter caseFTTrajectory(FTTrajectory object)
      {
        return createFTTrajectoryAdapter();
      }
      @Override
      public Adapter caseFTState(FTState object)
      {
        return createFTStateAdapter();
      }
      @Override
      public Adapter caseFTObservation(FTObservation object)
      {
        return createFTObservationAdapter();
      }
      @Override
      public Adapter caseFTDistanceObs(FTDistanceObs object)
      {
        return createFTDistanceObsAdapter();
      }
      @Override
      public Adapter caseFTHangingObs(FTHangingObs object)
      {
        return createFTHangingObsAdapter();
      }
      @Override
      public Adapter caseFTPickUpObs(FTPickUpObs object)
      {
        return createFTPickUpObsAdapter();
      }
      @Override
      public Adapter caseFTZoneObs(FTZoneObs object)
      {
        return createFTZoneObsAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.Fairtracksmodel <em>Fairtracksmodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.Fairtracksmodel
   * @generated
   */
  public Adapter createFairtracksmodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTStaticObject <em>FT Static Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTStaticObject
   * @generated
   */
  public Adapter createFTStaticObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObjectWithDistance <em>FT Object With Distance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObjectWithDistance
   * @generated
   */
  public Adapter createFTObjectWithDistanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPlayer <em>FT Player</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPlayer
   * @generated
   */
  public Adapter createFTPlayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPickUpColorClass <em>FT Pick Up Color Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPickUpColorClass
   * @generated
   */
  public Adapter createFTPickUpColorClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZone <em>FT Zone</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZone
   * @generated
   */
  public Adapter createFTZoneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObstacle <em>FT Obstacle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObstacle
   * @generated
   */
  public Adapter createFTObstacleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZipline <em>FT Zipline</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZipline
   * @generated
   */
  public Adapter createFTZiplineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTRealCoordinates <em>FT Real Coordinates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTRealCoordinates
   * @generated
   */
  public Adapter createFTRealCoordinatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTDistance <em>FT Distance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTDistance
   * @generated
   */
  public Adapter createFTDistanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTTrajectory <em>FT Trajectory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTTrajectory
   * @generated
   */
  public Adapter createFTTrajectoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTState <em>FT State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTState
   * @generated
   */
  public Adapter createFTStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObservation <em>FT Observation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTObservation
   * @generated
   */
  public Adapter createFTObservationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTDistanceObs <em>FT Distance Obs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTDistanceObs
   * @generated
   */
  public Adapter createFTDistanceObsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTHangingObs <em>FT Hanging Obs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTHangingObs
   * @generated
   */
  public Adapter createFTHangingObsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPickUpObs <em>FT Pick Up Obs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPickUpObs
   * @generated
   */
  public Adapter createFTPickUpObsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZoneObs <em>FT Zone Obs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FTZoneObs
   * @generated
   */
  public Adapter createFTZoneObsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FairtracksDslAdapterFactory
