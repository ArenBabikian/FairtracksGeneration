/**
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.fairtracksDsl;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>FT Zone Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage#getFTZoneType()
 * @model
 * @generated
 */
public enum FTZoneType implements Enumerator
{
  /**
   * The '<em><b>Background</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BACKGROUND_VALUE
   * @generated
   * @ordered
   */
  BACKGROUND(0, "Background", "Background"),

  /**
   * The '<em><b>Green</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #GREEN_VALUE
   * @generated
   * @ordered
   */
  GREEN(1, "Green", "Green"),

  /**
   * The '<em><b>Red</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RED_VALUE
   * @generated
   * @ordered
   */
  RED(2, "Red", "Red"),

  /**
   * The '<em><b>Passage</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PASSAGE_VALUE
   * @generated
   * @ordered
   */
  PASSAGE(3, "Passage", "Passage"),

  /**
   * The '<em><b>Ball</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BALL_VALUE
   * @generated
   * @ordered
   */
  BALL(4, "Ball", "Ball"),

  /**
   * The '<em><b>Search</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SEARCH_VALUE
   * @generated
   * @ordered
   */
  SEARCH(5, "Search", "Search"),

  /**
   * The '<em><b>Start</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #START_VALUE
   * @generated
   * @ordered
   */
  START(6, "Start", "Start"),

  /**
   * The '<em><b>Zipline</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ZIPLINE_VALUE
   * @generated
   * @ordered
   */
  ZIPLINE(7, "Zipline", "Zipline");

  /**
   * The '<em><b>Background</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Background</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BACKGROUND
   * @model name="Background"
   * @generated
   * @ordered
   */
  public static final int BACKGROUND_VALUE = 0;

  /**
   * The '<em><b>Green</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Green</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #GREEN
   * @model name="Green"
   * @generated
   * @ordered
   */
  public static final int GREEN_VALUE = 1;

  /**
   * The '<em><b>Red</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Red</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #RED
   * @model name="Red"
   * @generated
   * @ordered
   */
  public static final int RED_VALUE = 2;

  /**
   * The '<em><b>Passage</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Passage</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PASSAGE
   * @model name="Passage"
   * @generated
   * @ordered
   */
  public static final int PASSAGE_VALUE = 3;

  /**
   * The '<em><b>Ball</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Ball</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BALL
   * @model name="Ball"
   * @generated
   * @ordered
   */
  public static final int BALL_VALUE = 4;

  /**
   * The '<em><b>Search</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Search</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SEARCH
   * @model name="Search"
   * @generated
   * @ordered
   */
  public static final int SEARCH_VALUE = 5;

  /**
   * The '<em><b>Start</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Start</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #START
   * @model name="Start"
   * @generated
   * @ordered
   */
  public static final int START_VALUE = 6;

  /**
   * The '<em><b>Zipline</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Zipline</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ZIPLINE
   * @model name="Zipline"
   * @generated
   * @ordered
   */
  public static final int ZIPLINE_VALUE = 7;

  /**
   * An array of all the '<em><b>FT Zone Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final FTZoneType[] VALUES_ARRAY =
    new FTZoneType[]
    {
      BACKGROUND,
      GREEN,
      RED,
      PASSAGE,
      BALL,
      SEARCH,
      START,
      ZIPLINE,
    };

  /**
   * A public read-only list of all the '<em><b>FT Zone Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<FTZoneType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>FT Zone Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static FTZoneType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      FTZoneType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>FT Zone Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static FTZoneType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      FTZoneType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>FT Zone Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static FTZoneType get(int value)
  {
    switch (value)
    {
      case BACKGROUND_VALUE: return BACKGROUND;
      case GREEN_VALUE: return GREEN;
      case RED_VALUE: return RED;
      case PASSAGE_VALUE: return PASSAGE;
      case BALL_VALUE: return BALL;
      case SEARCH_VALUE: return SEARCH;
      case START_VALUE: return START;
      case ZIPLINE_VALUE: return ZIPLINE;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private FTZoneType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //FTZoneType
