/*
 * generated by Xtext 2.12.0
 */
package ca.mcgill.ecse.fairtracks.validation

//import ca.mcgill.ecse.fairtracks.queries.PlayerDistinctRole.Matcher
//import ca.mcgill.ecse.fairtracks.queries.FairtracksQueries
//import ca.mcgill.ecse.fairtracks.fairtracksDsl.FTPlayer
//import ca.mcgill.ecse.fairtracks.fairtracksDsl.FairtracksDslPackage
//import java.util.HashMap
//import org.eclipse.emf.common.util.URI
//import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
//import org.eclipse.viatra.query.runtime.api.ViatraQueryEngine
//import org.eclipse.viatra.query.runtime.emf.EMFScope
//import org.eclipse.xtext.validation.Check
//import ca.mcgill.ecse.fairtracks.queries.PlayerDistinctRole

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FairtracksDslValidator extends AbstractFairtracksDslValidator {
	
	public static val INVALID_NAME = 'invalidName'

//	@Check
//	def checkGreetingStartsWithCapital(FTPlayer player) {
//		
////		val rs = new ResourceSetImpl
////		val res = rs.createResource(URI.createPlatformPluginURI("ca.mcgill.ecse.faitracks.sampleInstances/initInstance.ft", false));
////		res.load(new HashMap);
//				
//				
//		//Add 1 line for local search engine
//		//need to create a hint + add hint as additional param
//		val engine  = viatraQueryEngine.on(new EMFScope(player.eResource)) 
//		//as ViatraQueryEngine
//		
////		FairtracksQueries.instance().prepare() AUTOMATICALLY
//		var mat = PlayerDistinctRole.Matcher.on(engine) as PlayerDistinctRole.Matcher
//		
//		if (mat.hasMatch(player, null, null)){
//			error('Duplicate player Role', 
//					FairtracksDslPackage.Literals.FT_PLAYER__ROLE,
//					INVALID_NAME)	
//		}
//		
//		if (mat.hasMatch(null, player, null)){
//			error('Duplicate player Role', 
//					FairtracksDslPackage.Literals.FT_PLAYER__ROLE,
//					INVALID_NAME)	
//		}
//	}
	
}
